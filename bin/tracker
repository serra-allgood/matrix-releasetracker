#!/usr/bin/env ruby

require 'json'
require 'logging'
require 'optparse'
require 'matrix_releasetracker'
require 'net/http'

# Fix for issue in Matrix SDK 1.1.0
unless MatrixSdk::Api.instance_methods.include? :server_version
  MatrixSdk::Api.class_eval do
    def server_version
      MatrixSdk::Response.new(self, request(:get, :federation_v1, '/version').server).tap do |resp|
        resp.instance_eval <<-'CODE', __FILE__, __LINE__ + 1
          def to_s
            "#{name} #{version}"
          end
        CODE
      end
    end
  end
end

ROOM_STATE_FILTER = {
  presence: { senders: [], types: [] },
  account_data: { senders: [], types: [] },
  room: {
    ephemeral: { senders: [], types: [] },
    state: {
      types: ['m.room.member'],
      lazy_load_members: true
    },
    timeline: {
      types: ['m.room.message']
    },
    account_data: { senders: [], types: [] }
  }
}.freeze

def fix_media_url(url, config)
  config.media[url] ||= begin
    data = Net::HTTP.get_response(URI(url))

    config.client.api.media_upload(data.body, data.content_type)[:content_uri] if data.is_a? Net::HTTPOK
  end
end

def run!
  options = {
    config: 'releasetracker.yml',
    loglevel: :info,
    sdk_debug: false
  }

  opts_parser = OptionParser.new do |opts|
    opts.banner = "Usage: #{File.basename($PROGRAM_NAME, File.extname($PROGRAM_NAME))} [ARGS...]"

    opts.on('-c', '--config CONFIG', 'specify the config file to use - defaults to "releasetracker.yml"') do |config|
      options[:config] = config
    end

    opts.on('-d', 'debug the SDK calls') do
      options[:sdk_debug] = true
    end

    opts.on('-v', '--verbose', 'use verbose output') do
      options[:loglevel] = :debug
    end

    opts.on('-h', '--help', 'show this text') do
      puts opts_parser
      exit
    end
  end
  opts_parser.parse!

  MatrixSdk.debug! if options[:sdk_debug]
  logger = Logging.logger['MatrixReleasetracker'].tap do |log|
    log.add_appenders Logging.appenders.stderr(
      layout: Logging::Layouts.pattern(pattern: "[%d|%.1l] %c: %m\n", date_pattern: '%F %T')
    )
    log.level = options[:loglevel]
  end

  config = MatrixReleasetracker::Config.load! options[:config]
  logger.info 'Loaded configuration.'

  api = config.client.api

  logger.info 'Ensuring configured rooms are joined.'
  config.backends.map { |_k, b| b.users.map { |u| u[:room] } }.flatten.uniq.each do |room|
    api.join_room(room.to_s)

    users = api.get_room_members(room)[:chunk].select { |c| c[:content][:membership] == 'join' }
    next if users.count > 1

    logger.info "Room #{room} is empty, leaving."
    config.client.users.delete_if { |u| u[:room] == room }

    api.leave_room(room)
  end

  logger.info "Starting tracker with #{config.backends.count} backends."
  loop do
    logger.info 'Checking Matrix client...'
    api.sync(timeout: 5.0, set_presence: :offline, since: config.client.next_batch, filter: ROOM_STATE_FILTER.to_json).tap do |data|
      config.client.next_batch = data[:next_batch]

      data[:rooms][:invite].each do |room_id, _invite|
        logger.info "  Invited to #{room_id}."

        next if config.backends.map { |_k, b| b.users.map { |u| u[:room] } }.flatten.uniq.count > 50

        logger.info "  Joining #{room_id}."
        api.join_room(room_id.to_s)
      end

      data[:rooms][:join].each do |room_id, join|
        join[:timeline][:events].select { |ev| ev[:type] == 'm.room.message' && ev[:content] && ev[:content][:msgtype] == 'm.text' }.each do |message|
          logger.info "  #{message[:sender]} in #{room_id}: #{message[:content][:body]}"

          next unless message[:content][:body].start_with? '!github '

          users = api.get_room_members(room_id)[:chunk].select { |c| c[:content][:membership] == 'join' }
          next if users.count > 2

          user = client.users.find { |u| u[:type] == :github && u[:room] == room_id }

          gh_name = message[:content][:body][8..-1]
          next if user && user[:name] == gh_name

          if user
            user[:name] = gh_name.downcase
          else
            client.users << {
              name: gh_name.downcase,
              room: room_id.to_s,
              type: :github,
              last_check: Time.now
            }
            config.backends[:github].instance_variable_set :@users, nil
          end

          api.send_notice(room_id.to_s, "Now tracking GitHub user '#{gh_name}'")
        end
      end
    end

    config.backends.each do |_k, b|
      logger.info "Polling backend #{b.name} with #{b.users.count} users..."
      b.users.each do |u|
        repos = b.stars(u[:name])
        releases = b.last_releases(u[:name])
        logger.info " Tracking #{repos.count} repositories - #{releases[:releases].count} with releases, for #{u[:name]}."

        selected_releases = releases[:releases].reject { |_k, v| v.nil? || v.publish_date < (u[:last_check] || Time.new(0)) }
        selected_releases.each do |_name, rel|
          logger.info "   Posting notice about #{rel.full_name} #{rel.version}"
          rel.avatar_url = fix_media_url(rel.avatar_url, config) if rel.avatar_url
          api.send_message_event(
            u[:room],
            'm.room.message',
            msgtype: 'm.notice',
            body: rel.to_s(:markdown),
            formatted_body: rel.to_s(:html),
            format: 'org.matrix.custom.html'
          )
        end

        u[:last_check] = Time.now if selected_releases.any?
      end

      b.post_update
    end

    config.save!
    logger.info 'Finished polling, data saved.'

    limits = config.backends.values.map(&:rate_limits).flatten.compact
    limits.each do |l|
      logger.info "Limit|#{l}"
    end
    limits = limits.select(&:near_limit)
    if limits.any?
      latest = limits.max(&:resets_in)

      logger.info "Backend limits almost reached for #{latest.backend.name}, sleeping for at least #{latest.resets_in / 60.0} minutes"
      sleep [latest.resets_in, 15 * 60].max
    else
      sleep 15 * 60
    end
  end
end

run! if $PROGRAM_NAME == __FILE__
